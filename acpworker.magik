_package sw

def_slotted_exemplar(:acpworker,
	{
		{:name, _unset },
		{:google_cs, _unset }
	},
	{:user_acp}
)
$

acpworker.define_shared_variable(:protocols, equality_property_list.new_with("get_all", :|get_all()|), :public)
acpworker.define_shared_constant(:success_code, 0, :public)
acpworker.define_shared_constant(:default_delimiter, "|", :public)

_method acpworker.new(name, exe_path)
	>> _clone.init(name, exe_path)
_endmethod

_private _method acpworker.init(name, exe)
	_self.init_copy()
	.name << name
	.command << {write_string(exe)}
	.program_ident << name
	.minimum_protocol << 0
	.maximum_protocol << 1
	.google_cs << _self.google_coordinate_system()
	print(.command)
	>> _self
_endmethod

_method acpworker.select_protocol()
	_return 0
_endmethod

_method acpworker.register_protocol(protocol_name, method_name)
	_self.protocols[protocol_name] << method_name
_endmethod

_method acpworker.send_error_message(message)
	_self.put_unsigned_byte(1)
	_self.put_chars(message)
	write("falha aqui: ", message)
	_return 
_endmethod

_method acpworker.send_success_status()
	_self.put_unsigned_byte(_self.success_code)
_endmethod

_method acpworker.start()
	_protect
		_self.lock()
		_loop
			_local protocol_name << _self.get_chars()
			write("protocolo: ", protocol_name)
			_if protocol_name = "server_fail" _then _leave _endif
			_if protocol_name = "server_stop" _then _leave _endif
			
			_local method_name << _self.protocols[protocol_name]
			_if method_name _is _unset 
			_then
				_self.send_error_message(write_string("Magik acpworker: ", "Unknown protocol"))
				_self.get_chars()
				_self.get_chars()
				_continue
			_endif
			_self.perform(method_name)
		_endloop
	_protection
		_self.stop()
	_endprotect 
_endmethod

_method acpworker.stop()
	_self.send_success_status()
	_self.put_chars("acpworker process finished")
	_self.flush()
	_self.close(_true)
	_self.unlock()
_endmethod

_method acpworker.google_coordinate_system()
	_local cs_name << :world_longlat_wgs84_degree
	transform.ellipsoid_sizes[:wgs84_spherical] << { 6378137, 1000000000000 }
	transform.define_datum(cs_name , transform.new(), :wgs84_spherical)

	_return coordinate_system.new_proj(
		cs_name, 
		:longlat, 
		{}, 
		coordinate.new(0, 0), 
		:degree, 
		:name, cs_name,
		:external_cs_name,"Long-Lat WGS84 (degree)",
		:in_cs_menus?,_true
	)
_endmethod

_method acpworker.get_transformation(dataset)
	_return transform.new_converting_cs_to_cs(dataset.world.coordinate_system, .google_cs)
_endmethod

_method acpworker.transformed_coordinate(a_coordinate, transformation)
	_return a_coordinate.transformed(transformation)
_endmethod

_method acpworker.get_all()
	_local dataset_name << _self.get_chars()
	_local collection_name << _self.get_chars()
	_local ds << gis_program_manager.databases[dataset_name.as_symbol()]

	# verifica a existencia do dataset pedido
	_if ds _is _unset
	_then
		_self.send_error_message(write_string("The Dataset ", dataset_name, " does not exists"))
		_return
	_endif

	_local transformation << _self.get_transformation(ds)

	# verifica a existencia da collection informada
	_local collection << ds.collections[collection_name.as_symbol()]
	_if collection _is _unset
	_then
		_self.send_error_message(write_string("The Collection ", collection_name, " does not exists"))
		_return
	_endif

	# envia o resultado positivo
	_self.send_success_status()

	_local fields << rope.new()
	_for f _over collection.all_fields.fast_elements()
	_loop
		fields.add(f.name)
	_endloop

	# envia a quantidade de objetos a serem enviados
	_local rows_to_send << min(600, collection.size)
	_self.put_unsigned_int(rows_to_send)
	_self.put_unsigned_int(fields.size)
	
	_local count << 0
	_for record _over collection.fast_elements()
	_loop @records
		_if count = 600 _then _leave _endif
		_for f _over fields.fast_elements()
		_loop @fields
			_local current_field << record.perform(f)
			_self.put_chars(write_string(current_field.class_name))
			_self.put_chars(write_string(f))
			_self.flush()

			_if current_field.class_name _is :chain
			_then
				_self.put_unsigned_int(current_field.n_segments)
				_for seg _over current_field.segments()
				_loop
					_local coord << _self.transformed_coordinate(seg, transformation)
					_self.put_float(coord[1].x)
					_self.put_float(coord[1].y)
					_self.put_float(coord[2].x)
					_self.put_float(coord[2].y)
				_endloop
			_elif current_field.class_name _is :point
			_then
				_local coord << _self.transformed_coordinate(current_field.coord, transformation)
				_self.put_float(coord.x)
				_self.put_float(coord.y)
			_elif current_field.class_name _is :area
			_then
				_local polygon << current_field.polygons.an_element()
				_local sectors << polygon.sectors.an_element()
				_self.put_unsigned_int(sectors.size)

				_for s _over sectors.fast_elements()
				_loop
					_local coord << _self.transformed_coordinate(s, transformation)
					_self.put_float(coord.x)
					_self.put_float(coord.y)
				_endloop
				_self.flush()
			_else
				_self.put_chars(write_string(current_field))
			_endif

			_self.flush()
		_endloop
		count << count + 1
	_endloop
	_self.flush()
_endmethod

_global acpw_snapshot << _unset
_global acpw_thread << _unset

_global acpw_start << _proc(name, exe)
	_global acpw_thread
	_global acpw_snapshot
	acpw_thread << _proc()
		_import name, exe
		_global acpw_snapshot
		acpw_snapshot << acpworker.new(name, exe)
		acpw_snapshot.start()
	_endproc.fork_at(light_thread.vm_priority - 1)
_endproc 

_global acpw_stop << _proc()
	_global acpw_snapshot
	acpw_snapshot.stop()
_endproc

# load_file("C:\Users\ahpv\Documents\Scripts\acp\acpworker.magik")
# acpw_start("w1", "C:\Users\ahpv\Documents\Scripts\acp\server\server.exe")
# acpw_stop()